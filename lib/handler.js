// Generated by CoffeeScript 1.6.3
(function() {
  var Err, Handler, handler, path;

  path = require('path');

  Err = require('./err1st');

  Handler = (function() {
    var mapReflect;

    mapReflect = ['code', 'msg'];

    function Handler() {
      this._map = {};
      this.locales = ['en'];
      this.localeDir = "" + (process.cwd()) + "/locales";
      this.name = null;
      Object.defineProperties(this, {
        map: {
          get: function() {
            return this._map;
          },
          set: function(map) {
            var i, k, v, _v;
            for (k in map) {
              v = map[k];
              if (v instanceof Array) {
                this._map[k] = {};
                for (i in mapReflect) {
                  _v = mapReflect[i];
                  this._map[k][_v] = v[i];
                }
              } else if (typeof v === 'number') {
                this._map[k] = {
                  code: v
                };
              } else {
                this._map[k] = v;
              }
            }
            return this._map;
          }
        }
      });
    }

    Handler.prototype.validate = function(fn) {
      if (typeof fn === 'function') {
        return fn.call(this, this);
      }
    };

    Handler.prototype.parse = function(err, options) {
      var lang, msg, _map, _phrase, _ref;
      if (options == null) {
        options = {};
      }
      if (!(err instanceof Err && this.map[err.toPhrase()])) {
        return err;
      }
      _phrase = err.toPhrase();
      _map = this.map[_phrase];
      err.code = _map.code;
      lang = options.lang || this.locales[0];
      msg = _map.msg || ((_ref = this.i18n()[lang]) != null ? _ref[_phrase] : void 0);
      if (this.name != null) {
        err.name = this.name;
      }
      if (typeof msg === 'function') {
        err.message = msg.apply(err, err.msgData);
      } else {
        err.message = msg;
      }
      return err;
    };

    Handler.prototype.i18n = function() {
      var e, i, lang, _i18n, _ref;
      if (this._i18n == null) {
        _i18n = {};
        _ref = this.locales;
        for (i in _ref) {
          lang = _ref[i];
          try {
            _i18n[lang] = require(path.join(this.localeDir, lang));
          } catch (_error) {
            e = _error;
            _i18n[lang] = {};
          }
        }
        this._i18n = _i18n;
      }
      return this._i18n;
    };

    return Handler;

  })();

  handler = new Handler;

  handler.Handler = Handler;

  module.exports = handler;

}).call(this);
