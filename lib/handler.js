// Generated by CoffeeScript 1.7.1
(function() {
  var Err, Handler, handler, path, util;

  path = require('path');

  util = require('util');

  Err = require('./err1st');

  Handler = (function() {
    var mapReflect;

    mapReflect = ['code', 'msg'];

    function Handler() {
      this._map = {};
      this._codes = {};
      this.locales = ['en'];
      this.localeDir = "" + (process.cwd()) + "/locales";
      this.i18nDict = {};
      Object.defineProperties(this, {
        map: {
          get: function() {
            return this._map;
          },
          set: function(map) {
            var i, k, v, _v;
            for (k in map) {
              v = map[k];
              k = k.toUpperCase();
              if (v instanceof Array) {
                this._map[k] = {};
                for (i in mapReflect) {
                  _v = mapReflect[i];
                  this._map[k][_v] = v[i];
                }
              } else if (typeof v === 'number') {
                this._map[k] = {
                  code: v
                };
              } else {
                this._map[k] = v;
              }
              if (this._map[k].code != null) {
                this._codes[Number(String(this._map[k].code).slice(3))] = k;
              }
            }
            return this._map;
          }
        }
      });
      this.map = {
        DEFAULT_ERROR: [500100, 'unknown error']
      };
    }

    Handler.prototype.validate = function(fn) {
      if (typeof fn === 'function') {
        fn.call(this, this);
      }
      this._loadI18n();
      return this;
    };

    Handler.prototype._loadI18n = function() {
      var e, i, i18n, k, lang, msg, msgMap, _ref;
      i18n = {};
      _ref = this.locales;
      for (i in _ref) {
        lang = _ref[i];
        i18n[lang] = this.i18nDict[lang] || {};
        try {
          if (this.localeDir) {
            i18n[lang] = util._extend(require(path.join(this.localeDir, lang)), i18n[lang]);
          }
        } catch (_error) {
          e = _error;
        }
      }
      for (lang in i18n) {
        msgMap = i18n[lang];
        for (k in msgMap) {
          msg = msgMap[k];
          k = k.toUpperCase();
          if (!this._map[k]) {
            this._map[k] = {};
          }
          this._map[k]["msg_" + lang] = msg;
        }
      }
      return this;
    };

    Handler.prototype.restore = function(code) {
      return new Err(this._codes[Number(code)]);
    };

    Handler.prototype.parse = function(err, options) {
      var lang, msg, _map, _phrase, _ref;
      if (options == null) {
        options = {};
      }
      if (typeof err === 'string') {
        err = new Err(err);
      }
      if ((err != null ? err.DNA : void 0) !== 'err1st') {
        if (err instanceof Error) {
          err = new Err(err);
        } else {
          err = new Err('DEFAULT_ERROR');
        }
      }
      _phrase = (_ref = err.toPhrase()) != null ? _ref.toUpperCase() : void 0;
      _map = this.map[_phrase];
      if (!_map) {
        err.longcode || (err.longcode = this.map['DEFAULT_ERROR'].code);
        return err;
      }
      if (this.name) {
        err.name = this.name;
      }
      err.longcode = _map.code || this.map['DEFAULT_ERROR'].code;
      lang = options.lang || this.locales[0];
      msg = _map["msg_" + lang] || _map['msg'];
      if (typeof msg === 'function') {
        err.message = msg.apply(err, err.msgData);
      } else if (typeof msg === 'string') {
        err.message = msg;
      }
      return err;
    };

    return Handler;

  })();

  handler = new Handler;

  handler.Handler = Handler;

  module.exports = handler;

}).call(this);
