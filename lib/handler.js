// Generated by CoffeeScript 1.6.3
(function() {
  var Err, Handler, handler, path;

  path = require('path');

  Err = require('./err1st');

  Handler = (function() {
    var mapReflect;

    mapReflect = ['code', 'msg'];

    function Handler() {
      this._map = {};
      this._code = {};
      this.locales = ['en'];
      this.localeDir = "" + (process.cwd()) + "/locales";
      this.name = null;
      Object.defineProperties(this, {
        map: {
          get: function() {
            return this._map;
          },
          set: function(map) {
            var i, k, v, _v;
            for (k in map) {
              v = map[k];
              if (v instanceof Array) {
                this._map[k] = {};
                for (i in mapReflect) {
                  _v = mapReflect[i];
                  this._map[k][_v] = v[i];
                }
              } else if (typeof v === 'number') {
                this._map[k] = {
                  code: v
                };
              } else {
                this._map[k] = v;
              }
              if (this._map[k].code != null) {
                this._code[this._map[k].code] = k;
              }
            }
            return this._map;
          }
        }
      });
      this.map = {
        defaultError: [500100, 'Unknown Error']
      };
    }

    Handler.prototype.validate = function(fn) {
      if (typeof fn === 'function') {
        return fn.call(this, this);
      }
    };

    Handler.prototype.restore = function(code) {
      return new Err(this._code[code]);
    };

    Handler.prototype.parse = function(err, options) {
      var lang, msg, _map, _oriPhrase, _phrase;
      if (options == null) {
        options = {};
      }
      if (typeof err === 'string') {
        err = new Err(err);
      }
      if (!(err instanceof Err && this.map[err.toPhrase()])) {
        _oriPhrase = err.toPhrase();
        err = new Err('defaultError');
      }
      _phrase = err.toPhrase();
      _map = this.map[_phrase];
      err.code = _map.code;
      lang = options.lang || this.locales[0];
      if (_oriPhrase != null) {
        msg = this.i18n(lang, _oriPhrase) || _map.msg;
      } else {
        msg = _map.msg || this.i18n(lang, _phrase);
      }
      if (this.name != null) {
        err.name = this.name;
      }
      if (typeof msg === 'function') {
        err.message = msg.apply(err, err.msgData);
      } else {
        err.message = msg;
      }
      return err;
    };

    Handler.prototype.i18n = function(lang, phrase) {
      var e, i, _i18n, _lang, _ref, _ref1, _ref2;
      if (this._i18n == null) {
        _i18n = {};
        _ref = this.locales;
        for (i in _ref) {
          _lang = _ref[i];
          try {
            _i18n[_lang] = require(path.join(this.localeDir, _lang));
          } catch (_error) {
            e = _error;
            _i18n[_lang] = {};
          }
        }
        this._i18n = _i18n;
      }
      if ((lang != null) && (phrase != null)) {
        return (_ref1 = this._i18n) != null ? (_ref2 = _ref1[lang]) != null ? _ref2[phrase] : void 0 : void 0;
      } else {
        return this._i18n;
      }
    };

    return Handler;

  })();

  handler = new Handler;

  handler.Handler = Handler;

  module.exports = handler;

}).call(this);
